{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["waitBufferUpdating","sourceBuffer","Promise","resolve","check","setTimeout","updating","waitSourceOpening","source","addEventListener","App","useEffect","a","player","document","getElementById","MediaSource","url","URL","createObjectURL","src","addSourceBuffer","fetch","response","body","reader","getReader","read","chunk","value","done","i","byteLength","appendBuffer","className","id","controls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oPAGMA,EAAqB,SAACC,GAC1B,OAAO,IAAIC,SAAQ,SAACC,GAClB,IAAMC,EAAQC,YAAW,WAClBJ,EAAaK,SAGhBF,IAFAD,MAID,SAIDI,EAAoB,SAACC,GACzB,OAAO,IAAIN,SAAQ,SAACC,GAClBK,EAAOC,iBAAiB,cAAc,WACpCN,WAmDSO,EA9CH,WAmCV,OAlCAC,qBAAU,WACR,sBACE,kCAAAC,EAAA,6DACQC,EAASC,SAASC,eAAe,UACjCP,EAAS,IAAIQ,YACbC,EAAMC,IAAIC,gBAAgBX,GAEhCK,EAAOO,IAAMH,EALf,SAMQV,EAAkBC,GAN1B,OAQQP,EAAeO,EAAOa,gBAAgB,4CAE5C,sBAAC,sCAAAT,EAAA,sEACwBU,MAAM,mBAD9B,OACOC,EADP,OAESC,EAASD,EAATC,KACFC,EAASD,EAAKE,YAHrB,uBAMwCD,EAAOE,OAN/C,mBAMkBC,EANlB,EAMWC,OANX,EAMyBC,KANzB,qDAUG,IAASC,EAAI,EAAGA,EAAIH,EAAMI,WAAYD,IACpCH,EAAMG,KAXX,OAcG9B,EAAagC,aAAaL,GAd7B,UAeS5B,EAAmBC,GAf5B,kEAAD,GAVF,0CADF,KA+BC,IAGD,qBAAKiC,UAAU,MAAf,SACE,uBACEC,GAAG,SACHC,UAAQ,OClDDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASC,eAAe,SAM1BsB,M","file":"static/js/main.d226e59c.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect } from 'react';\n\nconst waitBufferUpdating = (sourceBuffer) => {\n  return new Promise((resolve) => {\n    const check = setTimeout(() => {\n      if (!sourceBuffer.updating) {\n        resolve();\n      } else {\n        check();\n      }\n    }, 1000);\n  });\n}\n\nconst waitSourceOpening = (source) => {\n  return new Promise((resolve) => {\n    source.addEventListener(\"sourceopen\", () => {\n      resolve();\n    });\n  });\n}\n\nconst App = () => {\n  useEffect(() => {\n    (\n      async () => {\n        const player = document.getElementById('player');\n        const source = new MediaSource();\n        const url = URL.createObjectURL(source);\n\n        player.src = url;\n        await waitSourceOpening(source);\n\n        const sourceBuffer = source.addSourceBuffer('video/mp4; codecs=avc1.42E01E, mp4a.40.2');\n\n        (async () => {\n          const response = await fetch('./encrypted.mp4');\n          const { body } = response;\n          const reader = body.getReader();\n\n          while (true) {\n            const { value: chunk, done } = await reader.read();\n\n            if (done) break;\n\n            for (let i = 0; i < chunk.byteLength; i++) {\n              chunk[i]--;\n            }\n\n            sourceBuffer.appendBuffer(chunk);\n            await waitBufferUpdating(sourceBuffer);\n          }\n        }\n        )();\n      })();\n  }, []);\n\n  return (\n    <div className='App'>\n      <video\n        id='player'\n        controls\n      >\n      </video>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}